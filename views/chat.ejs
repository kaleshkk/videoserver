<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title> <%= pageTitle %></title>
    <link rel="stylesheet" href="/css/main.css">
    <script src="/socket.io/socket.io.js"></script>
</head>

<body>
    <header class="main-header">
        <nav class="main-header__nav">
            <ul class="main-header__item-list">
                <li class="main-header__item">Video Server</li>
            </ul>
        </nav>
    </header>
     <video id="myVideoTag" autoplay playsinline controls="false"/></video>
     <video id="theirVideoTag" autoplay playsinline controls="false"/></video>
    <div>
        <label>Your Name</label><input id="myName" type="text"/>
        <label>Message</label><input id="myMessage" type="text"/>
        <input id="sendMessage" type="submit"/>
        <div id="chatArea">Message Output:</br></div>
        <div id="signalingArea">Signaling Messages:</br></div>
    </div>
    
    <script>
        var myVideoArea = document.querySelector("#myVideoTag");
        var theirVideoArea = document.querySelector("#theirVideoTag");
        var myName = document.querySelector("#myName");
        var myMessage = document.querySelector("#myMessage");
        var sendMessage = document.querySelector("#sendMessage");
        var chatArea = document.querySelector("#chatArea");
        var signalingArea = document.querySelector("#signalingArea");
        var ROOM = "chat";
        var SIGNAL_ROOM = "signal_room";
        var configuration = {
            'iceServers': [{
                'url': 'stun:stun.l.google.com:19302'
            }]
        };
        var rtcPeerConn;
        
        io = io.connect();
        io.emit('ready', {"chat_room": ROOM, "signal_room": SIGNAL_ROOM});
        
        //Send a first signaling message to anyone listening
        //This normally would be on a button click
        io.emit('signal',{"type":"user_here", "message":"Are you ready for a call?", "room":SIGNAL_ROOM});
        
        io.on('signaling_message', function(data) {
            displaySignalMessage("Signal received: " + data.type);
            
            //Setup the RTC Peer Connection object
            if (!rtcPeerConn)
                startSignaling();
                
            if (data.type != "user_here") {
                var message = JSON.parse(data.message);
                if (message.sdp) {
                    rtcPeerConn.setRemoteDescription(new RTCSessionDescription(message.sdp), function () {
                        // if we received an offer, we need to answer
                        if (rtcPeerConn.remoteDescription.type == 'offer') {
                            rtcPeerConn.createAnswer(sendLocalDesc, logError);
                        }
                    }, logError);
                }
                else {
                    rtcPeerConn.addIceCandidate(new RTCIceCandidate(message.candidate));
                }
            }
            
        });
        
        async function startSignaling() {
            displaySignalMessage("starting signaling...");
            
            rtcPeerConn = new webkitRTCPeerConnection(configuration);
            
            // send any ice candidates to the other peer
            rtcPeerConn.onicecandidate = function (evt) {
                if (evt.candidate)
                    io.emit('signal',{"type":"ice candidate", "message": JSON.stringify({ 'candidate': evt.candidate }), "room":SIGNAL_ROOM});
                displaySignalMessage("completed that ice candidate...");
            };
            
            // let the 'negotiationneeded' event trigger offer generation
            rtcPeerConn.onnegotiationneeded = function () {
                displaySignalMessage("on negotiation called");
                rtcPeerConn.createOffer(sendLocalDesc, logError);
            }
            
            // once remote stream arrives, show it in the remote video element
            rtcPeerConn.onaddstream = function (evt) {
                displaySignalMessage("going to add their stream...");
                theirVideoArea.srcObject = evt.stream;
            };
            
            // get a local stream, show it in our video tag and add it to be sent

            const constraints = {
                'video': true,
                'audio': true
            }

            try {
                const constraints = {'video': true, 'audio': true};
                const stream = await navigator.mediaDevices.getUserMedia(constraints);
                const videoElement = document.querySelector('video#myVideoTag');
                videoElement.srcObject = stream;
                rtcPeerConn.addStream(stream);
            } catch(error) {
                console.error('Error opening video camera.', error);
            }
        }
        
        function sendLocalDesc(desc) {
            rtcPeerConn.setLocalDescription(desc, function () {
                displaySignalMessage("sending local description");
                io.emit('signal',{"type":"SDP", "message": JSON.stringify({ 'sdp': rtcPeerConn.localDescription }), "room":SIGNAL_ROOM});
            }, logError);
        }
        
        function logError(error) {
            displaySignalMessage(error.name + ': ' + error.message);
        }
        
        io.on('announce', function(data) {
            displayMessage(data.message);
        });
        
        io.on('message', function(data) {
            displayMessage(data.author + ": " + data.message);
        });
        
        function displayMessage(message) {
            chatArea.innerHTML = chatArea.innerHTML + "<br/>" + message;
        }
        
        function displaySignalMessage(message) {
            signalingArea.innerHTML = signalingArea.innerHTML + "<br/>" + message;
        }
        
        sendMessage.addEventListener('click', function(ev){
            io.emit('send', {"author":myName.value, "message":myMessage.value, "room":ROOM});
            ev.preventDefault();
        }, false);      
        
        
    </script>
</body>

</html>